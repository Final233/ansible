- name: 分发 kube_master 二进制
  copy: src={{ cluster_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl
  tags: upgrade_k8s

- name: 替换 kubeconfig 的 apiserver 地址
  lineinfile:
    dest: "{{ item }}"
    regexp: "^    server"
    line: "    server: https://127.0.0.1:{{ SECURE_PORT }}"
    # line: "    server: https://kubeapi.{{ CUSTOM_DOMAIN }}:{{ SECURE_PORT }}"
  with_items:
    - "/root/.kube/config"
    - "/etc/kubernetes/kube-controller-manager.kubeconfig"
    - "/etc/kubernetes/kube-scheduler.kubeconfig"

# - name: 生成token
#   shell: echo $(head -c 16 /dev/urandom | od -An -t x | tr -d ' '),kubelet-bootstrap,10001,"system:node-bootstrapper" > {{ TOKEN_DIR }}/token.csv
#   run_once: true

- name: 创建 master 服务的 systemd unit 文件
  template: src={{ item }}.j2 dest=/etc/systemd/system/{{ item }}
  with_items:
    - kube-apiserver.service
    - kube-controller-manager.service
    - kube-scheduler.service
  tags: restart_master, upgrade_k8s

- name: enable master 服务
  shell: systemctl enable kube-apiserver kube-controller-manager kube-scheduler
  ignore_errors: true

- name: 启动 master 服务
  shell: "systemctl daemon-reload && systemctl restart kube-apiserver && \
    systemctl restart kube-controller-manager && systemctl restart kube-scheduler"
  tags: upgrade_k8s, restart_master

# 轮询等待kube-apiserver启动完成
- name: 轮询等待kube-apiserver启动
  shell: "systemctl is-active kube-apiserver.service"
  register: api_status
  until: '"active" in api_status.stdout'
  retries: 10
  delay: 3
  tags: upgrade_k8s, restart_master

# 轮询等待kube-controller-manager启动完成
- name: 轮询等待kube-controller-manager启动
  shell: "systemctl is-active kube-controller-manager.service"
  register: cm_status
  until: '"active" in cm_status.stdout'
  retries: 8
  delay: 3
  tags: upgrade_k8s, restart_master

# 轮询等待kube-scheduler启动完成
- name: 轮询等待kube-scheduler启动
  shell: "systemctl is-active kube-scheduler.service"
  register: sch_status
  until: '"active" in sch_status.stdout'
  retries: 8
  delay: 3
  tags: upgrade_k8s, restart_master

- name: 以轮询的方式等待master服务启动完成
  command: "{{ bin_dir }}/kubectl get node"
  register: result
  until: result.rc == 0
  retries: 5
  delay: 6
  tags: upgrade_k8s, restart_master

- name: 获取user:kubernetes是否已经绑定对应角色
  shell: "{{ bin_dir }}/kubectl get clusterrolebindings|grep kubernetes-crb || echo 'notfound'"
  register: crb_info
  run_once: true

- name: 创建user:kubernetes角色绑定
  command: "{{ bin_dir }}/kubectl create clusterrolebinding kubernetes-crb --clusterrole=cluster-admin --user=kubernetes"
  run_once: true
  when: "'notfound' in crb_info.stdout"
